{"version":3,"sources":["11-chart.js"],"names":["margin","width","height","svg","d3","select","append","attr","xPositionScale","scaleLinear","domain","range","yPositionScale","scalePoint","scaleOrdinal","csv","then","ready","datapoints","log","selectAll","data","enter","d","hamburgers","animal","yAxis","axisLeft","call","xAxis","axisBottom","catch","err"],"mappings":";CACA,WAcIA,IAAAA,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GAEjDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAG5BG,EAAMC,GAAGC,OAAO,YAAYC,OAAO,OACpCC,KAAK,QAASN,EAAQD,EAAcA,GACpCO,KAAK,SAAUL,EAASF,EAAaA,GACrCM,OAAO,KACPC,KAAK,YAAa,aAAeP,EAAc,IAAMA,EAAa,KAK/DQ,EAAiBJ,GAAGK,cAAcC,OAAO,CAAC,EAAE,KAAKC,MAAM,CAAC,EAAGV,IAC3DW,EAAiBR,GAAGS,aAAaH,OAAO,CAAC,MAAO,MAAO,QAAQC,MAAM,CAAC,EAAGT,EAAS,KACrEE,GAAGU,eAAeH,MAAM,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,YAI3FI,GAAAA,IAAI,mBACJC,KAQMC,SAAMC,GACLC,QAAAA,IAAI,UAAWD,GAEfE,EAAAA,UAAU,UACXC,KAAKH,GACLI,QAAQhB,OAAO,UACfC,KAAK,IAAK,IAIVA,KAAK,KAAM,SAACgB,GACJf,OAAAA,EAAee,EAAEC,cAEzBjB,KAAK,KAAM,SAACgB,GACJX,OAAAA,EAAeW,EAAEE,UAEzBlB,KAAK,OAAQ,SAACgB,GACN,MAAA,YAMXG,IAAAA,EAAQtB,GAAGuB,SAASf,GAClBN,EAAAA,OAAO,KACRC,KAAK,QAAS,eACdqB,KAAKF,GAENG,IAAAA,EAAQzB,GAAG0B,WAAWtB,GACpBF,EAAAA,OAAO,KACRC,KAAK,QAAS,eACdA,KAAK,YAAa,eAAiBL,EAAS,KAC5C0B,KAAKC,KAvCTE,MAAM,SAASC,GACLb,QAAAA,IAAI,cAAea,KAtChC","file":"11-chart.9b4440ee.map","sourceRoot":"../src","sourcesContent":["/* global d3 */\n(function() {\n\n/* global d3 */\n//var width = 700,\n//  height = 600;\n\n// Create the SVG\n//var svg = d3.select('#chart')\n//  .append('svg')\n//  .attr('width', width)\n//  .attr('height', height)\n\n// Replace the code above with this in order to see the axis\n\nvar margin = { top: 20, right: 10, bottom: 20, left: 30 }\n\nvar width = 400 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom\n\n// You'll probably need to edit this one\nvar svg = d3.select(\"#chart11\").append(\"svg\")\n  .attr(\"width\", width + margin.left + margin.right)\n  .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n  .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n// -------------\n\n// Here are some scales for you // const because we are not going to change it\nconst xPositionScale = d3.scaleLinear().domain([0,20]).range([0, width]);\nconst yPositionScale = d3.scalePoint().domain(['cat', 'cow', 'dog']).range([0, height - 20]); //always turn it in the opposite direction\nconst colorScale = d3.scaleOrdinal().range([\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\",\"#f4cae4\",\"#e6f5c9\",\"#fff2ae\"]);\n\n// Read in some external data. When we're done, run the function 'ready'\n// the big difference between de v4 and d3 v5 is the way they read data. V4 .queue()\nd3.csv(\"eating-data.csv\")\n  .then(ready)\n  .catch(function(err) {\n     console.log(\"Failed with\", err)\n  })\n\n\n// This is 'ready':\n// it receives datapoints, our newly-read-in data\nfunction ready(datapoints) {\n  console.log(\"Data is\", datapoints);\n  // d3 code goes here\n      svg.selectAll('circle')\n        .data(datapoints)\n        .enter().append('circle')\n        .attr('r', 10)\n        //.attr('cx', function(d) {\n        //  return xPositionScale(d.gdp_per_capita)\n        //})\n        .attr('cx', (d) => { // it is almost the same thing\n          return xPositionScale(d.hamburgers)\n        })\n        .attr('cy', (d) => { // it is almost the same thing\n          return yPositionScale(d.animal)\n        })\n        .attr('fill', (d) => {\n          return '#FFB6C1'\n        })\n\n\n  // Always cut and paste the code for the axes!\n\n  var yAxis = d3.axisLeft(yPositionScale);\n    svg.append(\"g\")\n      .attr(\"class\", \"axis y-axis\")\n      .call(yAxis)\n\n  var xAxis = d3.axisBottom(xPositionScale)\n    svg.append(\"g\")\n      .attr(\"class\", \"axis x-axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis)\n\n}\n\n\n})()\n\n"]}